import { Link, useNavigate, useParams } from "react-router-dom"
import { deleteAllFlowersByArrangementId, deleteArrangement, deleteArrangementMeaning, getArrangementByArrangementId, getFlowersByArrangementId, getMeaningByArrangementId } from "../../Services/arrangementsServices"
import { useEffect, useState } from "react"
import { Flower } from "../Flowers/Flower"

export const ArrangementDetails = ({ currentUser }) => {
    const { arrangementId } = useParams()
    const [currentArrangement, setCurrentArrangement] = useState({})
    const [meaning, setArrangementMeaning] = useState()
    const [allArrangementFlowers, setAllArrangementFlowers] = useState()
    const [drilledDownFlowers, setDrilledDownFlowers] = useState()
    const navigate = useNavigate()

    const fetchAndSetArrangementsMeaningsFlowers = () => {
        getArrangementByArrangementId(Number(arrangementId)).then((arrangementObj) => {
            setCurrentArrangement(arrangementObj)
        })
        getMeaningByArrangementId(Number(arrangementId)).then((meaningObj) => {
            setArrangementMeaning(meaningObj[0])
        })
        getFlowersByArrangementId(Number(arrangementId)).then((flowersArray) => {
            setAllArrangementFlowers(flowersArray)
        })
    }
    
    const handleDelete = async () => {
        await deleteArrangementMeaning(currentArrangement.id)
        await deleteAllFlowersByArrangementId(currentArrangement)
        await deleteArrangement(currentArrangement.id)
        navigate("/arrangements")
    }
    console.log(currentArrangement)
    useEffect(() => {
        if (arrangementId) {
            fetchAndSetArrangementsMeaningsFlowers()
        }
    }, [arrangementId])

    useEffect(() => {
        if (allArrangementFlowers) {
            const flowers = allArrangementFlowers.map(arrangementFlower => arrangementFlower.flower)
            setDrilledDownFlowers(flowers)
        }
    }, [allArrangementFlowers])

    console.log(drilledDownFlowers)
    if (!currentArrangement || !meaning || !currentUser || !drilledDownFlowers) { return null }
    return <>
        {/*This is a container that contains all elements related to  the arrangement */}
        <div className="max-w-screen-lg mx-auto grid grid-cols-1 md:grid-cols-2 gap-12 items-start px-8 py-12">
            {/* Arrangement Image Generated By ChatGPT */}
            <div className="flex justify-center p-4">
                <img
                    alt="A straight table wreath of dog wood flowers"
                    src="image.placeholder.png"
                    className="w-[90%] max-w-lg h-[500px] object-cover border-4 border-amber-300 rounded-lg shadow-lg"
                />
                {/*information section details */}
                <div className="space-y-10 px-6">
                    <div>
                        {/* arrangement header */}
                        <div className="text-center">
                            <h2 className="text-5xl font-bold text-center text-stone-500">{currentArrangement.name}</h2>
                            <hr className="w-60 mx-auto mt-4 border-2 border-green-800" />
                        </div>
                        {/*Arrangement Meaning(s) and Date Created */}
                        <div className="flex justify-between text-lg font-medium text-stone-500 pt-8 pb-8">
                            {/* Meanings Displayed Here inline with meanings */}
                            <div>
                                <span className="font-semibold text-stone-700">
                                    Meaning: </span> {meaning.meaning.meaningTag}
                            </div>
                            {/* Date Created Displayed Here inline with meanings */}
                            <div>
                                <span className="font-semibold text-stone-700 pl-15px">
                                    Created on </span> {currentArrangement.dateCreated}
                            </div>
                        </div>
                        {/* Container that holds the flowers in arrangement cards */}
                        <div>
                            {/*Section Header for Flowers in Arrangement*/}
                            <div className="space-y-6">
                                <h3 className="text-2xl front-semibold text-stone-700">Flowers In Arrangement</h3>
                            </div>
                            <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols3 lg:grid-cols-4 gap-6">
                                {/* container that holds all the flower cards */}
                                <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
                                    {/* container for individual cards */}
                                    {
                                        drilledDownFlowers.map(flowerObj => {
                                            return (
                                                <Link to={`/floret-library/${flowerObj.id}`} key={flowerObj.id}>
                                                    <Flower flowerObj={flowerObj} />
                                                </Link>
                                            )
                                        })
                                    }
                                </div>
                            </div>
                            {/*Creator Notes */}
                            <div>
                                <div className="space-y-2">
                                    <h3 className="text-2xl font-semibold text-stone-700">Creator Notes</h3>
                                    <p className="text-stone-700 leading-relaxed">{currentArrangement.notes}</p>
                                </div>
                            </div>
                            <div>
                                {currentUser.id === currentArrangement.userId && (
                                    <>
                                        {<button className="mt-4 bg-amber-300 text-white px-4 py-2 rounded-lg hover:bg-amber-500 transition" onClick={(event) => { event.preventDefault(); navigate(`/arrangements/${currentArrangement.id}/edit-arrangement`) }}>Edit Arrangement</button>}
                                        {<button className="mt-4 bg-red-300 text-white px-4 py-2 rounded-lg hover:bg-red-500 transition" onClick={handleDelete}>Delete Arrangement</button>}
                                    </>
                                )}
                            </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </>
}

